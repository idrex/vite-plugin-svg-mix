import type { HtmlTagDescriptor, Plugin } from 'vite';
import { createFilter } from 'vite';

import { transformSvgSprite } from './sprite';

// 配置项
export interface Options {
  include: string; // 包含路径
  injectTo?: 'body-prepend' | 'head' | 'body' | 'head-prepend' | undefined; // 插入位置
  prefix?: string; // 前缀
}

export default function ({ include, injectTo = 'body-prepend', prefix = 'icon' }: Options): Plugin {
  const virtualModuleId = 'virtual:svg-mix';
  const resolvedVirtualModuleId = '\0' + virtualModuleId;
  const filter = createFilter(include);
  return {
    name: 'svg-mix',
    resolveId(id) {
      if (id === virtualModuleId) {
        return resolvedVirtualModuleId;
      }
    },
    transformIndexHtml: (): Promise<HtmlTagDescriptor[]> => {
      return new Promise<HtmlTagDescriptor[]>((resolve, reject) => {
        transformSvgSprite(include, filter, prefix)
          .then((str: any) => {
            resolve([
              {
                tag: 'div',
                attrs: {
                  'autoGenerated-from': 'svg-mix',
                  style: 'position: absolute;width: 0;height: 0;visibility: hidden',
                },
                children: str,
                injectTo,
              },
            ]);
          })
          .catch((error: any) => reject(error));
      });
    },
  };
}
